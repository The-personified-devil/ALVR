/* ALVR is licensed under the MIT license. https://github.com/alvr-org/ALVR/blob/master/LICENSE */

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define WS_BROADCAST_CAPACITY 256

typedef struct AlvrTargetConfig {
    uint32_t target_width;
    uint32_t target_height;
} AlvrTargetConfig;

typedef struct AlvrBatteryValue {
    uint64_t device_id;
    // range [0, 1]
    float value;
} AlvrBatteryValue;

typedef enum AlvrEvent_Tag {
    ALVR_EVENT_CLIENT_CONNECTED,
    ALVR_EVENT_CLIENT_DISCONNECTED,
    ALVR_EVENT_BATTERY,
    ALVR_EVENT_BOUNDS,
    ALVR_EVENT_RESTART_PENDING,
    ALVR_EVENT_SHUTDOWN_PENDING,
} AlvrEvent_Tag;

typedef struct AlvrEvent {
    AlvrEvent_Tag tag;
    union {
        struct {
            struct AlvrBatteryValue battery;
        };
        struct {
            float bounds[2];
        };
    };
} AlvrEvent;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

uint64_t alvr_get_time_ns(void);

uint64_t alvr_path_to_id(const char *path_string);

void alvr_log_error(const char *string_ptr);

void alvr_log_warn(const char *string_ptr);

void alvr_log_info(const char *string_ptr);

void alvr_log_debug(const char *string_ptr);

void alvr_log_periodically(const char *tag_ptr, const char *message_ptr);

void alvr_initialize_logging(void);

void alvr_initialize(struct AlvrTargetConfig *out_target_config);

void alvr_start_connection(void);

bool alvr_poll_event(struct AlvrEvent *out_event);

// Retrun true if a valid value is provided
bool alvr_duration_until_next_vsync(uint64_t *out_ns);

void alvr_send_haptics(uint64_t device_id, float duration_s, float frequency, float amplitude);

void alvr_send_video(uint64_t timestamp_ns, uint8_t *buffer_ptr, int32_t len, bool is_idr);

void alvr_send_video_header(const uint8_t *buffer_ptr, int32_t len, int32_t codec);

void alvr_restart(void);

void alvr_shutdown(void);

// This is the SteamVR/OpenVR entry point
// # Safety
void *HmdDriverFactory(const char *interface_name, int32_t *return_code);

uint64_t get_serial_number(uint64_t device_id, char *out_str);

void set_device_openvr_props(uint64_t device_id);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus
